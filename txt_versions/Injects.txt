

1. Assess Server Requirements
* Identify what services each server is running and the associated ports:
o Windows Server:
* Active Directory/DNS: TCP/UDP 53
* DHCP: UDP 67, 68
o Linux Servers (Ubuntu, CentOS):
* Web Server: TCP 80 (HTTP), TCP 443 (HTTPS)
* NTP: UDP 123

2. Configure Firewalls
Windows Server (Using Windows Firewall)
1. Open Windows Defender Firewall with Advanced Security.
2. Create Inbound Rules for required services:
o Example: Allow DNS (TCP/UDP 53) and DHCP (UDP 67, 68).
3. Create Outbound Rules for necessary services, block the rest.
4. Remove unnecessary default rules.
Linux Servers (Using UFW or FirewallD)
* Using UFW (Ubuntu):
o Allow necessary ports and deny others.
Example commands:
* sudo ufw allow 80/tcp
* sudo ufw allow 443/tcp
* sudo ufw allow 123/udp
* sudo ufw enable
* Using FirewallD (CentOS/Fedora):
o Add services and reload configuration.
Example commands:
* sudo firewall-cmd --add-service=http --permanent
* sudo firewall-cmd --add-service=https --permanent
* sudo firewall-cmd --add-service=ntp --permanent
* sudo firewall-cmd --reload

3. Test Firewall Rules
* Use tools to verify open ports:
o Ping: Ensure connectivity where necessary.
o Telnet or Curl: Test specific port access (e.g., curl http://<server_ip>:80).
o Nmap: Scan from another machine to verify allowed/blocked ports:
* nmap -p- <server_ip>

4. Document Setup
1. Take screenshots of:
o Windows Firewall Rules: Show inbound and outbound configurations.
o Linux Firewall Rules: Use UFW or FirewallD outputs.
Example commands:
* For UFW: sudo ufw status
* For FirewallD: sudo firewall-cmd --list-all
2. Create a list of all servers and the firewall rules applied.

Business Memo Template
Subject: Server-Based Firewall Configuration
Summary:
Firewalls have been configured on all servers to allow only required inbound and outbound traffic for their respective services. This ensures minimal exposure to unnecessary traffic and maintains a secure environment.
Policies Used:
* Allowed only required ports:
o Example: AD/DNS (TCP/UDP 53), HTTP/HTTPS (TCP 80, 443), NTP (UDP 123).
o Internal services are restricted to the internal subnet (192.168.0.0/24).
* All other traffic is blocked by default.
Screenshot Evidence:
* Attached screenshots of configured firewall rules for:
o Windows Server 2019 (AD/DNS/DHCP).
o Ubuntu 18 (Web server running HTTP/HTTPS).
List of Servers with Configured Firewalls:
* Windows Server 2019 (AD/DNS/DHCP)
* Ubuntu 18 (Web)
* CentOS 7 (E-comm)
* Fedora 21 (Webmail)



Steps for Completing the Inject: Evaluate External Perimeter for Risk Vulnerabilities
1. Scan External Perimeter
* Select a Scanning Tool: Use tools such as:
o Nmap: For service enumeration.
o OpenVAS or Nessus: For vulnerability assessment.
o Nikto: For web server vulnerabilities.
* Run a Basic Scan to Enumerate Exposed Services:
Example commands:
o Using Nmap:
* nmap -sV -p- <external_ip>
* nmap -sC -sV <external_ip>
o Using OpenVAS or Nessus:
* Perform a full vulnerability scan on the external IP.

2. Probe Identified Services
* Evaluate Services Found: Check the ports and services running (e.g., HTTP, FTP, SSH).
* Check for Known Vulnerabilities: Use databases such as:
o CVE (Common Vulnerabilities and Exposures)
o NVD (National Vulnerability Database)

3. Document Findings
* Create a Results Table: Organize findings into a clear table with these columns:
o Service Name
o Port Number
o Known Vulnerabilities (if any)
o Risk Level (e.g., High, Medium, Low)
Example Table:
ServicePortVulnerabilityRisk LevelHTTP80CVE-2023-1234HighSSH22NoneLowFTP21CVE-2022-5678Medium
4. Business Memo Template
Subject: External Perimeter Evaluation for Vulnerabilities
Summary:
A comprehensive scan was conducted on the external perimeter of the network to identify exposed services and potential vulnerabilities. The findings include the identification of exposed services, known vulnerabilities, and their respective risk levels.
Tool Used:
* [Name of Tool] (e.g., Nmap, Nessus, OpenVAS)
* Brief explanation of its functionality.
Results Summary:
* Enumerated services: [List services found].
* Vulnerabilities: [Summarize key vulnerabilities].
* Risk levels assigned to each service based on CVE data and analysis.
Recommendations:
* Patch or mitigate vulnerabilities for high-risk services immediately.
* Restrict or secure access to medium-risk services.
* Monitor low-risk services and perform regular scans.
Attached Evidence:
* Screenshots of tool results.
* Table summarizing findings.

















Steps for Completing the Inject: Configure Firewall to Log Denied Packets
1. Enable Logging for Denied Packets
* Windows Firewall:
1. Open Windows Defender Firewall with Advanced Security.
2. Go to Monitoring > Firewall Properties.
3. Under each profile (Domain, Private, Public):
* Click Customize in the "Logging" section.
* Enable "Log Dropped Packets" and specify the log file path (e.g., C:\Windows\System32\LogFiles\Firewall\pfirewall.log).
4. Apply settings.
* Linux Firewalls:
o UFW (Ubuntu):
1. Enable logging: sudo ufw logging on
2. Logs will be written to /var/log/ufw.log.
o FirewallD (CentOS/Fedora):
1. Enable logging for dropped packets: sudo firewall-cmd --set-log-denied=all sudo firewall-cmd --reload
2. Logs will be in /var/log/messages or /var/log/firewalld.

2. Verify Logging Functionality
* Check the Logs:
o Windows: Open the log file (e.g., pfirewall.log) using a text editor.
o Linux:
* UFW: sudo cat /var/log/ufw.log
* FirewallD: sudo cat /var/log/messages | grep "DENIED"
* Simulate Denied Traffic:
o Use tools like telnet, curl, or nmap from an external system to send traffic to a port that should be blocked.
o Confirm that the denied packets are logged.

3. Document Findings
* Screenshots:
o Take screenshots of the firewall logging configuration.
o Capture log entries showing denied packets (include timestamps, IPs, and protocols).
* Log Extract Example:
o Provide a few lines from the log file as evidence: 2024-01-23 15:32:45 Denied TCP 192.168.1.10:1234 10.0.0.5:80 2024-01-23 15:33:12 Denied UDP 192.168.1.11:5678 10.0.0.6:53

Business Memo Template
Subject: Configuration of Firewall to Log Denied Packets
Summary:
The firewall was configured to log all denied packets that were not permitted by specific rules. This ensures that any anomalies or unauthorized attempts to access the network are captured for review and analysis.
Steps Taken:
1. Enabled logging for all denied packets in the firewall settings.
2. Verified functionality by simulating denied traffic.
3. Reviewed and confirmed logs to ensure denied packets are properly recorded.
Log File Details:
* Location: Specify log file path, e.g., C:\Windows\System32\LogFiles\Firewall\pfirewall.log or /var/log/ufw.log.
* Example Log Entries:
2024-01-23 15:32:45 Denied TCP 192.168.1.10:1234 10.0.0.5:80
2024-01-23 15:33:12 Denied UDP 192.168.1.11:5678 10.0.0.6:53
Attached Evidence:
* Screenshots of the firewall configuration.
* Extract from log files showing examples of denied packets.
Steps for Completing the Inject: Configure Palo Alto Firewall to Log Denied Packets
1. Enable Logging for Denied Packets
* Log in to the Palo Alto Firewall web interface.
* Navigate to Policies > Security.
* Identify and edit the Deny All or equivalent rule at the bottom of the rule set:
1. In the Actions tab, ensure "Log at Session End" is checked for this rule.
2. If there is no explicit deny rule, create one:
* Set the rule to deny traffic from any source to any destination.
* Enable "Log at Session End."
* Commit changes to apply the configuration.

2. Verify Logging Functionality
* Navigate to Monitor > Traffic Logs.
* Filter for Action = deny to confirm logs are being recorded for denied traffic.
* Simulate denied traffic by sending unauthorized packets to the firewall:
o Use tools like telnet, curl, or nmap to target closed ports or restricted IPs.
o Verify these attempts are logged in the traffic logs.

3. Capture Log Details
* Take screenshots of the Palo Alto Traffic Logs showing denied packets.
* Export logs if necessary by selecting entries and downloading them as a CSV or viewing them in your SIEM/log aggregation tool.
* Example Log Entry:
o Example Fields: Source IP, Destination IP, Denied Port/Protocol, Application, Timestamp.

4. Business Memo Template
Subject: Configuration of Palo Alto Firewall to Log Denied Packets
Summary:
The Palo Alto Firewall was configured to log all denied packets to ensure visibility into unauthorized traffic. This configuration enables anomaly detection and strengthens network monitoring capabilities.
Steps Taken:
1. Configured the firewall’s deny rule to log all denied packets.
2. Simulated unauthorized traffic to validate the functionality.
3. Verified logs in the Traffic Log section of the Palo Alto interface.
Log File Details:
* Example Denied Log Entries:
o Source IP: 192.168.1.50
o Destination IP: 10.0.0.5
o Denied Port: TCP 80
o Application: unknown-tcp
o Action: deny
o Timestamp: 2024-01-23 15:45:12
Attached Evidence:
* Screenshot of the Deny rule configuration in Palo Alto Firewall.
* Screenshot of denied traffic entries from the Traffic Logs.




















Steps for Completing the Inject: Implement an IPv6 Network Between Two Servers Using a Palo Alto Firewall/Router
1. Plan the IPv6 Addressing Scheme
* Use private IPv6 addressing from the fd00::/8 range.
* Example addressing:
o Server 1: fd00:abcd::1/64
o Server 2: fd00:abcd::2/64
o Subnet Prefix: /64
* Assign an IPv6 address to the Palo Alto Firewall interface in the same subnet:
o Palo Alto Firewall: fd00:abcd::254/64
2. Configure IPv6 on the Palo Alto Firewall
1. Log in to the Palo Alto Firewall web interface.
2. Navigate to Network > Interfaces.
3. Select the interface that connects to the servers (e.g., ethernet1/2) and click "Edit."
4. Under the IPv6 tab:
o Enable IPv6.
o Set the IPv6 address to fd00:abcd::254/64.
o Ensure "Enable Router Advertisement" is checked if the servers should auto-configure.
5. Commit the changes to apply the configuration.
3. Configure IPv6 on Both Servers
* For Linux Servers (Ubuntu, CentOS, etc.):
1. Edit the network interface configuration file.
* On Ubuntu/Debian: Open the configuration file with a text editor (e.g., sudo nano /etc/netplan/01-netcfg.yaml) and add the IPv6 address. Example: network: version: 2 ethernets: eth0: dhcp4: true dhcp6: false addresses: - fd00:abcd::1/64 Apply the configuration using the command: sudo netplan apply.
* On CentOS/Red Hat: Edit the file /etc/sysconfig/network-scripts/ifcfg-eth0 to include: IPV6ADDR="fd00:abcd::1/64" IPV6INIT=yes Restart the network service with: sudo systemctl restart network.
* For Windows Servers:
1. Open PowerShell as Administrator.
2. Assign the IPv6 address using the command: New-NetIPAddress -InterfaceAlias "Ethernet" -IPAddress "fd00:abcd::1" -PrefixLength 64.
4. Verify Connectivity
* Test IPv6 connectivity between the servers and the Palo Alto Firewall:
o From Server 1 to the Firewall: ping6 fd00:abcd::254.
o From Server 2 to the Firewall: ping6 fd00:abcd::254.
o Between servers: ping6 fd00:abcd::2 from Server 1 and ping6 fd00:abcd::1 from Server 2.
* Ensure successful pings and capture screenshots of the results.
5. Set Up IPv6 Routing or Firewall Policies (Optional)
* Navigate to Policies > Security on the Palo Alto Firewall.
* Add rules to allow or restrict IPv6 traffic between the servers or external devices:
1. Create a new security policy with Source Zone as the interface connected to the servers and Destination Zone as the same.
2. Allow IPv6 traffic (ICMPv6, TCP, UDP) as needed.
3. Commit changes.

Business Memo Template
Subject: Implementation of IPv6 Network Between Two Servers Using a Palo Alto Firewall
Summary:
An IPv6 network was successfully implemented between two servers using dual-stacked IPv4/IPv6 configurations. A Palo Alto Firewall was configured to route and monitor traffic within the private IPv6 network.
Addressing Scheme Used:
* Server 1: fd00:abcd::1/64
* Server 2: fd00:abcd::2/64
* Palo Alto Firewall: fd00:abcd::254/64
Steps Taken:
1. Configured IPv6 addressing for both servers and the Palo Alto Firewall.
2. Verified connectivity between the servers and the firewall.
3. Configured basic IPv6 routing and tested functionality.
Attached Evidence:
* Screenshots of the Palo Alto Firewall IPv6 interface configuration.
* Screenshots of the IPv6 ping results between the servers and the firewall.
* Screenshot of server IPv6 interface configurations.










Steps for Completing the Inject: Create Forensic Analysis Request - NTPa Log File Extract
1. Analyze the Packet Capture
* Examine the NTP Packet Layout:
o Leap Indicator: No (indicates no warning for clock synchronization issues).
o Version Number: 4 (commonly used in NTP).
o Key fields to analyze:
* Stratum: Indicates the level in the hierarchy (e.g., Stratum 1 = highly accurate, such as atomic clocks).
* Poll Interval: Time interval between requests.
* Precision: Accuracy of the local clock.
* Transmit Timestamp: The exact time the NTP packet was sent.
2. Check for Anomalies or Malware Beacon Behavior
* Indicators of a Malware Beacon:
o Irregular polling intervals: Malware may use NTP packets to communicate at precise intervals (e.g., every few seconds).
o Suspicious Stratum value: Non-standard values (e.g., Stratum 0 or excessively high numbers) can indicate misuse.
o Unexpected source or destination IP: Verify if the packet is sent to or from unknown or external IPs.
o Payload content: NormalNTP packets typically don’t have additional payload data; check for any unexpected data.
* Use Tools for Analysis:
o Load the packet capture into Wireshark.
o Filter NTP packets using the display filter: ntp
o Inspect the packet for fields and values that match the layout provided.
3. Make a Determination
* Compare the packet fields against known legitimate NTP behavior.
* If there are irregularities (e.g., incorrect Stratum, unexpected timestamps, or unusual payloads), flag it as suspicious.
* If the packet appears consistent with legitimate NTP traffic, rule out malware.
4. Document Your Findings
* Include the following in your forensic report:
o Description of the packet layout, including:
* Leap Indicator: No.
* Version Number: 4.
* Stratum value, Poll Interval, and Precision.
o Observations:
* Source and destination IPs.
* Timestamp details.
* Any irregularities in the packet.
o Conclusion:
* State whether the packet is consistent with legitimate NTP traffic or if it raises concerns.
5. Business Memo Template
Subject: Forensic Analysis of NTP Packet - SOCS04A
Summary:
A recent packet capture of an NTP packet was analyzed to determine whether it is a malware beacon. The packet was examined for key fields, anomalies, and consistency with legitimate NTP traffic.
Packet Layout Observed:
* Leap Indicator: No.
* Version Number: 4.
* Other Key Fields:
o Stratum: [Specify observed value].
o Poll Interval: [Specify observed value].
o Transmit Timestamp: [Specify observed value].
Analysis Observations:
* Source and Destination IPs: [Specify].
* Regularity of polling intervals: [Specify].
* Payload content: [Specify if any additional data is present].
Conclusion:
* [Determine whether the packet is legitimate or suspicious based on the analysis].
Attached Evidence:
* Screenshots of the packet analysis in Wireshark.
* Details of the packet fields and observed values.

Steps for Completing the Inject: Create Forensic Analysis Request - NTPa Log File Extract (same thing but with more detail from second inject screenshot)
1. Analyze the NTP Packet Details
* Key fields from the packet:
o Leap Indicator: No.
o Version Number: 4.
o Mode: Client.
o Stratum: 52.
o Poll: 10.
o Precision: -24.
o Root Delay: 0.001846.
o Root Dispersion: 0.034897.
o Reference ID: 106.20.14.218.
o Timestamps:
* Originate Timestamp: Jan 5, 2024 13:04:22.653850915 UTC.
* Receive Timestamp: Jan 5, 2024 13:04:22.653533004 UTC.
* Transmit Timestamp: Jan 5, 2024 13:04:22.675517085 UTC.
* Reference Timestamp: Jan 5, 2024 13:04:22.653533004 UTC.
o Key Identifier: 00000001.
o Message Digest: 64677fe6c6f6f61420706179c6f636433.
2. Compare with Normal NTP Behavior
* Stratum Value:
Stratum 52 is highly unusual. Typical NTP Stratum values range from 1 (highly accurate) to 15 (less accurate). A value this high could indicate tampering or an illegitimate server.
* Precision and Timestamps:
o Precision (-24) is unusually high but could still be valid depending on the implementation.
o The timestamps show consistent behavior (Originate, Receive, Transmit, and Reference Timestamps align logically). This aligns with normal NTP packet behavior.
* Root Delay and Dispersion:
o Root Delay (0.001846) and Root Dispersion (0.034897) are within typical ranges and do not indicate suspicious behavior.
* Reference ID:
The Reference ID (106.20.14.218) should be investigated. Check if this IP belongs to a legitimate NTP server or an unauthorized source.
* Key Identifier and Message Digest:
These fields are valid, but the key (00000001) and message digest need to be verified against the organization's trusted keys to ensure they align with expected values.
3. Check for Malware Beacon Characteristics
* High Stratum values (e.g., 52) are often seen in malicious NTP packets used for covert communication.
* Cross-check the Reference ID (106.20.14.218) against known legitimate NTP servers. If it does not match, it could indicate an illegitimate source.
* Look for irregularities in timing, payload size, or additional data, as these can also signal malware activity.
4. Make a Judgment
Based on the provided fields:
* Stratum 52 and the unusual Reference ID raise concerns. Further investigation of the Reference ID and network behavior is required.
* If the Reference ID is verified as legitimate and there are no other anomalies, this packet could be consistent with normal NTP traffic.

Business Memo Template
Subject: Forensic Analysis of NTP Packet - SOCS04A
Summary:
A captured NTP packet was analyzed to determine whether it is consistent with normal behavior or indicative of a malware beacon. The packet's fields were reviewed against expected NTP values and behavior.
Key Observations:
* Stratum Value: 52, which is unusually high and atypical for legitimate NTP servers.
* Reference ID: 106.20.14.218, requiring verification against trusted NTP server lists.
* Root Delay and Dispersion: Within normal ranges.
* Timestamps: Logical and consistent with standard NTP behavior.
Conclusion:
While most fields align with legitimate NTP traffic, the high Stratum value and the need to verify the Reference ID raise potential concerns. This packet could represent a normal NTP request if the Reference ID is legitimate, but the possibility of misuse should not be ruled out without further investigation.
Recommendations:
1. Verify the Reference ID (106.20.14.218) against known trusted NTP servers.
2. Monitor the network for further traffic from this source or similar patterns.
3. Investigate if the high Stratum value (52) correlates with known issues or attack vectors.
Attached Evidence:
* Screenshots of the packet analysis with key fields highlighted.
* Details of timestamps, Reference ID, and associated metadata.



Steps for Completing the Inject: Protect from Denial of Service Attacks
1. Identify Device and Configuration Changes
* Device Used: Palo Alto Firewall (or other firewall/router in the topology).
* Configuration Changes:
o Enable DoS Protection Profiles:
* Navigate to Policies > DoS Protection.
* Create a DoS protection profile for specific zones or IP addresses.
* Configure the profile to detect and block specific attack types (e.g., SYN floods, ICMP floods).
o Rate Limiting:
* Set thresholds for incoming connections to mitigate volumetric attacks.
* Example: Limit SYN packets to a certain number per second.
o Zone Protection Profiles:
* Navigate to Network > Zone Protection.
* Add protection against floods, reconnaissance, and packet-based attacks.
o Stateful Inspection:
* Ensure stateful inspection is enabled to detect abnormal traffic patterns.
2. Explain DoS Attack Types Addressed
* SYN Floods:
o Exploit the TCP handshake process by sending a high number of SYN packets without completing the handshake, consuming server resources.
o Mitigation: Configure SYN cookies and rate limiting.
* ICMP Floods:
o Overwhelm the target by sending excessive ICMP echo requests (ping).
o Mitigation: Enable flood protection and rate limiting for ICMP traffic.
* UDP Floods:
o Send large amounts of UDP packets to random ports, causing excessive resource usage.
o Mitigation: Drop excessive UDP packets using rate limiting.
* Application Layer Attacks:
o Target specific services (e.g., HTTP) to exhaust server resources.
o Mitigation: Use application-layer rate limiting or filters.
* Malformed Packets:
o Send corrupted or incomplete packets to crash or destabilize services.
o Mitigation: Enable deep packet inspection and block malformed packets.
3. Provide Screenshots of Configuration
* Include screenshots of:
o DoS Protection Profiles: Settings showing thresholds and enabled protections.
o Zone Protection Profile: Configurations for flood protection, reconnaissance protection, etc.
o Logs/GUI showing active protection or dropped packets.

Business Memo Template
Subject: Network Configuration to Protect from Denial of Service Attacks
Summary:
The firewall was configured to protect the network from various Denial of Service (DoS) attacks by implementing specific protection profiles and rate-limiting measures. This ensures the perimeter of the network is safeguarded against volumetric and protocol-based attacks.
Device Used:
* Palo Alto Firewall (or equivalent).
Configuration Changes Made:
1. Enabled and configured DoS Protection Profiles for zones and IP ranges.
2. Applied Zone Protection Profiles for flood and reconnaissance protection.
3. Implemented rate limiting for SYN packets, ICMP traffic, and UDP floods.
Types of DoS Attacks Addressed:
* SYN Floods: Prevented by using SYN cookies and rate limiting.
* ICMP Floods: Mitigated by limiting ICMP traffic.
* UDP Floods: Controlled with packet filtering and rate limits.
* Application Layer Attacks: Mitigated through specific application-layer protections.
* Malformed Packets: Blocked by enabling deep packet inspection.
Attached Evidence:
* Screenshots of DoS Protection Profiles and Zone Protection Profiles.
* Logs showing blocked or dropped DoS traffic



Steps for Completing the Inject: Configure Consistent Accurate Time on All Devices
1. Select an NTP Time Source
o Choose a reliable NTP server for your network to synchronize time:
* Use an external NTP Pool source (e.g., pool.ntp.org) for the primary time source.
* Configure an internal device (e.g., the Debian 10 DNS/NTP server in your topology) as the local NTP server.
* Ensure the selected internal NTP server has a Stratum 2 or Stratum 3 value.
2. Configure the Internal Device to Synchronize with an External NTP Source
o For the internal NTP server (e.g., Debian 10):
* Install and configure the NTP service:
sudo apt update
sudo apt install ntp
* Edit the NTP configuration file:
sudo nano /etc/ntp.conf
* Replace or verify the NTP servers with the following:
server 0.pool.ntp.org iburst
server 1.pool.ntp.org iburst
server 2.pool.ntp.org iburst
server 3.pool.ntp.org iburst
* Restart the NTP service:
sudo systemctl restart ntp
* Verify synchronization:
ntpq -p
3. Configure Other Devices to Sync with the Internal NTP Server
o For Linux devices:
* Edit the NTP configuration file:
sudo nano /etc/ntp.conf
* Set the internal NTP server:
server <internal_ntp_server_ip> iburst
* Restart the NTP service:
sudo systemctl restart ntp
* Verify synchronization:
ntpq -p
o For Windows devices:
* Open Command Prompt as Administrator.
* Set the internal NTP server:
w32tm /config /manualpeerlist:<internal_ntp_server_ip> /syncfromflags:manual /reliable:YES /update
* Restart the time service:
w32tm /resync
4. Implement Access Controls
o Restrict access to the internal NTP server:
* Configure the firewall (e.g., Palo Alto) to allow only internal devices to access the NTP service.
* Apply access control lists (ACLs) to block unauthorized access.
5. Verify and Document
o Take screenshots showing:
* NTP configuration on the internal NTP server.
* NTP configuration on downstream devices.
* Output showing synchronized time (e.g., ntpq -p for Linux or w32tm /query /status for Windows).
Business Memo Template
Subject: Configuration of Consistent Accurate Time Across Network Devices
Summary:
To ensure accurate event correlation and network consistency, all devices in the network have been configured to synchronize time with a designated internal NTP server. This internal server synchronizes with a reliable external NTP Pool source.
Internal NTP Resource:
* Device: Debian 10 (DNS/NTP Server)
* NTP Source: pool.ntp.org (Stratum 2).
Configuration Steps:
1. Configured the Debian 10 server as the internal NTP server.
2. Pointed all downstream devices to the internal NTP server for time synchronization.
3. Restricted NTP access to internal devices only through access control lists and firewall rules.
Precautions Taken:
* Implemented firewall rules to prevent unauthorized access to the internal NTP server.
* Verified that all devices are synchronized and functioning correctly.
Attached Evidence:
* Screenshots of the NTP configuration on the internal server and downstream devices.  & Output showing synchronized time from each device.


Steps for Completing the Inject: Critique and Implement a Login Banner
1. Review the Login Banner
Provided Banner:
Welcome to the Corporate Research Network
Contact the Server Administrator for Access Credentials
Since logins are not monitored, if you have problems, notify the Help Desk at 555-555-1234, Mon - Fri 8am to 5pm ET.
Critique:
o The banner states "logins are not monitored," which creates a security risk and may encourage unauthorized access.
o Publicly displaying access credentials and operational hours could aid attackers through social engineering.
o The banner lacks a legal disclaimer about unauthorized access and potential consequences for misuse.
Suggested Changes:
o Remove any language that implies a lack of monitoring.
o Add a clear legal disclaimer prohibiting unauthorized access.
o Retain a concise help desk contact for legitimate users needing assistance.
Revised Login Banner:
Welcome to the Corporate Research Network
Unauthorized access to this system is prohibited.
All activities are monitored and recorded.
If you require assistance, please contact the Help Desk at 555-555-1234, Mon - Fri 8am to 5pm ET.
2. Implement the Updated Banner
o Windows Host:
* Open the Group Policy Editor (gpedit.msc).
* Navigate to Computer Configuration > Windows Settings > Security Settings > Local Policies > Security Options.
* Configure the following policies:
* Interactive Logon: Message text for users attempting to log on.
* Interactive Logon: Message title for users attempting to log on.
* Enter "Corporate Research Network" as the title and paste the revised banner text as the message.
o Linux Host:
* Edit the /etc/issue file to apply the pre-login banner:
* Open the file with a text editor (e.g., nano or vi).
* Add the revised banner text.
* Save the file and restart the system to apply the changes.
* Optionally, you can also update the /etc/motd file for post-login messages.
o Firewall (e.g., Palo Alto):
* Log in to the Palo Alto web interface.
* Navigate to Device > Setup > Management.
* Locate the Login Banner section and edit it.
* Paste the revised banner text and save changes.
* Commit the configuration to apply the changes.
3. Verify and Document
o Confirm that the updated banner appears correctly on:
* A Windows host at the logon screen.
* A Linux host at the pre-login prompt.
* The firewall management login page.
o Capture screenshots of each updated login banner for documentation.

Business Memo Template
Subject: Implementation and Critique of Login Banner
Summary:
A login banner was implemented across all relevant systems, including Windows hosts, Linux hosts, and the firewall. The original banner was reviewed, and updates were made to address legal and security concerns.
Critique of the Original Banner:
* The statement "logins are not monitored" was removed to avoid implying the network is unsecured.
* A legal disclaimer was added to emphasize the prohibition of unauthorized access.
* A monitoring notice was included to deter malicious activity.
Revised Banner:
Welcome to the Corporate Research Network
Unauthorized access to this system is prohibited.
All activities are monitored and recorded.
If you require assistance, please contact the Help Desk at 555-555-1234, Mon - Fri 8am to 5pm ET.
Implementation Summary:
1. The revised banner was configured on:
o Windows hosts using Group Policy.
o Linux hosts by editing the /etc/issue file.
o Firewall via the management interface.
2. Verified that the updated banner is displayed across all devices.
Attached Evidence:
* Screenshots of the updated login banner from a Windows host, a Linux host, and the firewall.














Steps for Completing the Inject: Create a Log File Extract
1. Describe the Steps Taken to Ensure the Integrity of the Data
o Use secure methods to access and collect syslog data, such as SSH with strong authentication.
o Export logs in a read-only format (e.g., .log or .txt) to prevent tampering.
o Generate a checksum, such as SHA-256, for the log file after extraction to ensure the file's integrity.
o Store the original log file and checksum in a secure location, such as encrypted storage or write-once media like a USB drive with write protection enabled.
2. Describe How Chain of Custody is Maintained
o Record details of every individual who handles the log file, including time of access, purpose, and storage location.
o Use a logbook or a digital tracking system to document the chain of custody.
o Include metadata in the documentation, such as file creation timestamp, file size, and checksum value.
o Restrict access to the log file to authorized personnel only.
3. Verify Timestamps on All Entries and Ensure Accuracy
o Ensure all devices generating logs are synchronized with a central NTP server, such as the internal NTP server configured earlier.
o Validate timestamps in the syslog entries to confirm they align with the expected timeline.
o Document the time synchronization process to demonstrate accuracy.
o Include in the log report how timestamps were verified and any adjustments made during the investigation.

Procedure for Extracting Syslog Information
1. Access syslog files on each device:
o On Linux devices, logs are typically located in /var/log/. Examples include /var/log/syslog for Ubuntu/Debian and /var/log/messages for CentOS/Red Hat.
o Use commands to extract the last 15 minutes of logs, such as:
grep "$(date --date='15 minutes ago' '+%b %e %H:%M')" /var/log/syslog > extracted_logs.log
o For Palo Alto Firewall:
Log in to the web interface, navigate to Monitor > Logs > System, filter for the last 15 minutes, and export as CSV or plain text.
2. Combine logs from all devices:
o Consolidate logs into a single file, grouping entries by device or network segment.
o Append device identifiers, such as hostname or IP address, to distinguish logs from each source.
3. Generate a checksum for the final log file:
o Use a checksum tool, such as sha256sum, to create a checksum for the log file.
o Save the checksum file along with the extracted log file.

Business Memo Template
Subject: Creation of Syslog Extract for Legal Investigation
Summary:
A syslog extract representing the last 15 minutes of network activity was created to support the organization's legal team in an unauthorized access case. Measures were taken to ensure data integrity, maintain the chain of custody, and verify the accuracy of timestamps.
Steps to Ensure Data Integrity:
* Logs were securely extracted from devices using read-only methods.
* A checksum was generated for the final log file to ensure its integrity during handling.
Chain of Custody:
* A detailed record of all individuals handling the log file was maintained.
* Metadata, including file creation timestamp, size, and checksum, was documented.
Timestamp Verification:
* Timestamps were validated against the central NTP server to ensure accuracy.
* All logs were reviewed for consistency with expected timelines.
Attached Evidence:
* Extracted log file with chain of custody documentation.
* Screenshot of the log file.
* Checksum file for verification.





Steps for Completing the Inject: Secure In-band Network Management
1. Identify Devices Using In-band Management
o Based on the topology, the following devices may use in-band management:
* Palo Alto Firewall: Likely accessed via HTTPS or SSH on its management interface (eth1/4).
* Windows Server 2019: May use Remote Desktop Protocol (RDP) or Windows Management Tools.
* Linux Servers (Debian 10, Ubuntu 18, CentOS 7, Fedora 21): Likely accessed via SSH or web-based interfaces for specific applications.
* Network Monitoring Tools (e.g., Splunk 9.1.1): Potentially accessed for logging and monitoring, requiring management security.
2. Secure In-band Management
o Restrict Access to Management Interfaces:
* Configure Access Control Lists (ACLs) or firewall rules on the Palo Alto Firewall:
* Restrict management traffic to specific IPs/subnets used by administrators.
* For example, allow SSH and HTTPS traffic only from the internal admin subnet (e.g., 192.168.1.0/24).
* On Linux and Windows servers, configure host-based firewalls (e.g., UFW, Windows Firewall) to allow access only from trusted admin IPs.
o Enforce Secure Communication Protocols:
* Replace insecure protocols such as Telnet with SSH on all servers.
* Use HTTPS instead of HTTP for web-based management interfaces (e.g., the Palo Alto Firewall or Splunk server).
o Enable Strong Authentication:
* Enforce strong, unique passwords for all management accounts.
* Implement multi-factor authentication (MFA) for critical devices (e.g., the firewall and AD server).
o Logging and Monitoring:
* Ensure management access is logged on all devices (e.g., syslog for Linux, Event Viewer for Windows).
* Set up alerts for unauthorized access attempts using Splunk.
3. Disable In-band Management if Unused
o On any device where in-band management is not required, disable the management interface:
* For Palo Alto Firewall, disable unused management protocols under Device > Setup > Management.
* On Linux, stop unnecessary services such as Telnet or web-based interfaces:
* Disable Telnet: sudo systemctl disable telnet.socket.
* On Windows, remove RDP access if not needed.
4. Verify Security on Each Device
o Perform the following checks for each device:
* Palo Alto Firewall:
* Attempt to access the management interface from both authorized and unauthorized IP addresses.
* Verify only allowed IPs can access HTTPS or SSH on eth1/4.
* Windows Server 2019:
* Confirm RDP or other management tools accept connections only from allowed IPs.
* Use Event Viewer to verify login attempts are logged.
* Linux Servers:
* Test SSH access from authorized and unauthorized IPs.
* Confirm logs record login attempts (/var/log/auth.log or /var/log/secure).
* Splunk 9.1.1:
* Verify HTTPS access to the Splunk interface is restricted to the admin subnet.

Business Memo Template
Subject: Verification and Security of In-band Network Management
Summary:
The in-band network management capabilities of all devices in the network were reviewed and secured to limit access to authorized users and tools. Unused management features were disabled to minimize exposure to unauthorized access.
Actions Taken:
1. Identified devices using in-band management:
o Palo Alto Firewall (HTTPS/SSH).
o Windows Server 2019 (RDP).
o Linux Servers (SSH and web-based interfaces).
o Splunk 9.1.1 (web-based interface).
2. Configured ACLs and firewall rules to restrict management access to authorized IPs/subnets.
3. Replaced insecure protocols (e.g., Telnet) with secure alternatives like SSH and HTTPS.
4. Enabled strong authentication mechanisms, including MFA where applicable.
5. Disabled in-band management on devices where it was not required.
6. Verified security measures by testing access and reviewing logs.
Verification Summary:
* Management access was tested on all devices. Unauthorized attempts were successfully blocked, and authorized connections were verified.
* Logs were reviewed to confirm that management access attempts are being recorded.
Devices Secured:
* Palo Alto Firewall (eth1/4).
* Windows Server 2019.
* Linux Servers (Debian 10, Ubuntu 18, CentOS 7, Fedora 21).
* Splunk 9.1.1.
Attached Evidence:
* Screenshots of firewall rules and device configurations.
* Logs showing authorized and unauthorized management access attempts.











Steps for Completing the Inject: Software Acquisition Checklist
Checklist for Software and SaaS Acquisition
1. Technical Considerations
* Compatibility:
o Ensure the software is compatible with the existing systems and infrastructure (e.g., operating systems, hardware, network requirements).
* Scalability:
o Verify that the software can scale with the organization’s future growth and needs.
* Performance Requirements:
o Assess the software's performance capabilities, such as processing speed, uptime, and response times.
* Integration:
o Confirm that the software integrates seamlessly with existing applications, databases, and tools.
2. Information Security Considerations
* Data Security:
o Evaluate how the software protects sensitive data (e.g., encryption, access controls).
* Compliance:
o Verify that the software complies with relevant legal and regulatory requirements (e.g., GDPR, HIPAA).
* Access Management:
o Ensure the software supports robust authentication mechanisms (e.g., MFA) and role-based access control (RBAC).
* Incident Response:
o Confirm that the vendor provides clear procedures for incident response and breach notifications.
3. Contractual and Licensing Elements
* Licensing Model:
o Understand whether the software is subscription-based (SaaS) or perpetual licensing.
o Review costs for additional features, users, or upgrades.
* Service Level Agreements (SLAs):
o Check for guaranteed uptime, support response times, and penalties for service disruptions.
* Termination Clauses:
o Review terms for ending the agreement, data retention policies, and transitioning to another solution.
* Vendor Support:
o Confirm the availability of technical support, training resources, and documentation.
4. Evaluation Process
* User Feedback:
o Gather feedback from employees or teams who will use the software.
* Trial Period:
o Test the software in a trial environment before purchase.
* Vendor Reputation:
o Research vendor reviews, references, and case studies.
5. Due Diligence
* Background Check:
o Perform a background check on the vendor for financial stability and past security incidents.
* Total Cost of Ownership (TCO):
o Assess all costs, including implementation, training, maintenance, and renewal fees.

Business Memo Template
Subject: Software and SaaS Acquisition Checklist
Summary:
The attached checklist was developed to guide the organization in selecting new software and SaaS products. It addresses technical, security, and contractual considerations to ensure due diligence in the acquisition process.
Checklist Overview:
1. Technical Considerations:
o Evaluate compatibility, scalability, performance, and integration with existing systems.
2. Information Security:
o Assess data security measures, regulatory compliance, access management, and incident response processes.
3. Contractual and Licensing Elements:
o Understand licensing models, review SLAs, and ensure clear termination clauses and vendor support.
4. Evaluation Process:
o Conduct user feedback sessions, utilize trial periods, and review the vendor’s reputation.
5. Due Diligence:
o Perform background checks on the vendor and assess the total cost of ownership.
Purpose:
This checklist ensures the organization acquires software that meets its technical needs, aligns with its security requirements, and adheres to budgetary constraints while mitigating risks associated with procurement.
Attached: Software Acquisition Checklist















Steps for Completing the Inject: Securing Home Directories on Linux
1. List the Linux Command to Set Permissions on a Home Directory
o To set the permissions on a home directory so only the owner has access, use the following command:
chmod 700 /home/username
o This sets the directory permissions to:
* Read, write, and execute for the owner.
* No access for group and others.
2. How Home Directories Were Located
o On Linux systems, home directories are typically located in /home/.
o To list all home directories, use the command:
ls -ld /home/*
o This displays a detailed listing of permissions for all user directories under /home/.
o If users have custom home directories, these can be identified by checking the /etc/passwd file. Use the following command:
cat /etc/passwd | awk -F: '{print $1, $6}'
o This lists each username and their corresponding home directory.
3. Enumerating Insecure Directories
o Use the following command to find directories with incorrect permissions:
find /home -maxdepth 1 -type d ! -perm 700
o This command checks for directories that do not have 700 permissions.
o Review the output to identify specific directories and users that require adjustments.
o Common examples of insecure directories:
* Permissions set to 755, which allows group and others to read/execute.
* Permissions set to 777, which allows full access to everyone.
4. Securing Insecure Directories
o For each directory identified with insecure permissions, execute:
chmod 700 /home/username
5. Verify Changes
o Confirm the updated permissions using:
ls -ld /home/*
o Ensure all home directories now have drwx------ permissions.

Business Memo Template
Subject: Securing Home Directories on Linux Servers
Summary:
The home directories for all users on Linux servers were audited and secured to ensure only the owners have access. Incorrect permissions were identified and corrected using appropriate Linux commands.
Steps Taken:
1. Located home directories for all users by listing the /home/ directory and cross-referencing the /etc/passwd file.
2. Identified directories with insecure permissions using the find command.
3. Corrected permissions by setting them to 700, ensuring only the owner has access.
4. Verified changes to confirm that all home directories are now secure.
Findings:
* The following directories were found with incorrect permissions and were secured:
o /home/user1 (previously 755)
o /home/user2 (previously 777)
* All other home directories were already properly secured.
Command Used to Correct Permissions:
chmod 700 /home/username
Attached Evidence:
* Screenshot of the ls -ld /home/* command output showing the updated directory permissions.













Business Memo: Elements of a Complete Incident Report
Subject: Essential Elements of a Complete Incident Report
Summary:
This memo outlines the critical elements included in an incident report and explains why they are important. These elements demonstrate the organization’s due diligence in responding to incidents, protecting assets, and ensuring compliance with legal and regulatory requirements.

Elements of a Complete Incident Report
1. Incident Identification and Description
o What to Include:
* Incident title, unique identifier, and description of the event (e.g., unauthorized access, data breach).
* Date and time the incident was detected and resolved.
o Why It’s Important:
* Provides a clear overview of the event and helps track similar incidents for trends and patterns.
* Establishes a timeline critical for legal and forensic purposes.
2. Affected Assets and Impact Assessment
o What to Include:
* Systems, data, or users affected by the incident.
* Business impact (e.g., data loss, financial losses, downtime).
o Why It’s Important:
* Helps quantify the scope of the incident and prioritize response efforts.
* Demonstrates an understanding of organizational risk to auditors and stakeholders.
3. Root Cause Analysis
o What to Include:
* Detailed explanation of how and why the incident occurred (e.g., misconfiguration, malware, insider threat).
* Supporting evidence, such as logs or investigation findings.
o Why It’s Important:
* Identifies underlying vulnerabilities and prevents recurrence.
* Proves that due diligence was exercised in uncovering the cause.
4. Actions Taken to Resolve the Incident
o What to Include:
* Immediate actions to contain and mitigate the incident.
* Steps taken to restore systems, recover data, or secure the environment.
o Why It’s Important:
* Highlights the organization’s swift and effective response to minimize impact.
* Demonstrates compliance with internal policies and regulatory requirements.
5. Lessons Learned and Preventive Measures
o What to Include:
* Summary of insights gained from the incident.
* Changes to policies, procedures, or controls to prevent similar incidents.
o Why It’s Important:
* Shows continuous improvement and proactive risk management.
* Helps auditors evaluate the organization’s commitment to security.
6. Evidence and Documentation
o What to Include:
* Logs, screenshots, or other evidence collected during the investigation.
* Chain of custody for critical data.
o Why It’s Important:
* Provides proof for legal proceedings and external audits.
* Ensures transparency and accountability in handling the incident.

Importance of These Elements
1. Demonstrating Due Diligence:
Including these elements in an incident report shows that the organization takes security incidents seriously and follows structured processes to address them.
2. Legal and Compliance Requirements:
Well-documented reports protect the organization in legal disputes and demonstrate compliance with regulations (e.g., GDPR, HIPAA, PCI-DSS).
3. Protecting Organizational Assets:
By thoroughly analyzing incidents and implementing preventive measures, the organization reduces the likelihood of future incidents and safeguards critical assets.
4. Transparency and Accountability:
Clear documentation builds trust with stakeholders, external auditors, and legal counsel, showing that the organization operates with integrity and accountability.

Steps for Completing the Inject: Install an Encrypted Container
1. Download and Install VeraCrypt
o Download VeraCrypt from the provided link: https://veracrypt.eu/en/Home.html.
o Install VeraCrypt on each Windows machine:
* Run the installer with Administrator privileges.
* Follow the installation wizard, accepting the default settings.
2. Create an Encrypted Container
o Launch VeraCrypt after installation.
o Click on “Create Volume” and follow the steps in the VeraCrypt Volume Creation Wizard:
* Volume Type: Choose "Create an encrypted file container."
* Volume Location: Specify the path and name for the container (e.g., C:\SensitiveDataContainer.vc).
* Encryption Options:
* Algorithm: Use AES (Advanced Encryption Standard) with a 256-bit key. AES is widely accepted in Europe and complies with GDPR for data protection.
* Hash Algorithm: Use SHA-512 for cryptographic hashing to ensure strong integrity verification.
* Volume Size: Choose a size sufficient for project files (e.g., 2 GB).
* Password: Set a strong password (minimum 20 characters with a mix of uppercase, lowercase, numbers, and symbols). Avoid predictable phrases or patterns.
* Filesystem Format: Choose NTFS if files larger than 4 GB are required. Otherwise, FAT32 is sufficient.
3. Mount and Use the Encrypted Container
o Open VeraCrypt and select the encrypted container file.
o Choose an available drive letter and click “Mount.”
o Enter the password to access the container.
o Store sensitive project documents within the mounted container.
4. Rationale for Encryption Algorithm and Features
o AES-256 Encryption:
* AES is widely recognized for its strength and is approved by the European Union and other international standards (e.g., ISO/IEC 18033-3).
* 256-bit keys ensure robust protection against brute-force attacks.
o SHA-512 Hash Algorithm:
* Offers high resistance to collision and pre-image attacks, ensuring data integrity.
* Commonly used in secure European systems.
o Strong Password Requirement:
* Ensures access control by requiring a password resistant to dictionary and brute-force attacks.
o Filesystem Options:
* NTFS supports larger files and advanced permissions if needed.
5. Compliance with European Standards
o The encryption parameters selected align with GDPR requirements and other European data protection standards, demonstrating due diligence in securing intellectual property.
6. Verification
o After creation, verify the encrypted container by mounting and accessing it.
o Test file operations (e.g., copying, opening, and deleting files) to ensure functionality.

Business Memo Template
Subject: Installation of Encrypted Container for Intellectual Property Protection
Summary:
To secure sensitive client data in accordance with European standards, VeraCrypt was installed on all Windows machines, and encrypted containers were created with robust encryption parameters. These containers provide a secure environment for storing intellectual property.
Steps Taken:
1. Installed VeraCrypt on each Windows machine.
2. Created encrypted containers using AES-256 encryption and SHA-512 for hashing.
3. Configured strong passwords and verified functionality by mounting and testing the containers.
Rationale for Selected Parameters:
* AES-256 ensures compliance with GDPR and provides strong protection against unauthorized access.
* SHA-512 enhances data integrity verification.
* Strong password policies further secure the encrypted containers.
Compliance:
The encryption parameters align with GDPR and other European data protection standards, ensuring that the organization meets the client's security expectations.
Attached Evidence:
* Screenshots of VeraCrypt installation and the configuration of encrypted containers.
* Verification of mounted containers on each machine.

Guide: Setting Up a Samba Share for Linux-to-Linux and Linux-to-Windows File Sharing
1. Install Samba
On the Linux machine that will host the shared folder, install Samba:
o For Debian/Ubuntu-based systems, run:
sudo apt update
sudo apt install samba -y
o For Red Hat-based systems (e.g., CentOS, Fedora), run:
sudo yum install samba -y
2. Create the Shared Folder
Create a directory to share, for example:
sudo mkdir -p /srv/samba/share
Set appropriate permissions:
sudo chmod 2770 /srv/samba/share
sudo chown nobody:sambashare /srv/samba/share
3. Configure Samba
Open the Samba configuration file:
sudo nano /etc/samba/smb.conf
Add the following section at the end of the file:
[SharedScreenshots]
path = /srv/samba/share
browsable = yes
writable = yes
guest ok = yes
read only = no
force create mode = 0660
force directory mode = 2770
Save and exit the file.
4. Restart Samba Service
Restart Samba to apply the configuration changes:
sudo systemctl restart smbd
5. Allow Samba Through the Firewall (if applicable)
Open ports for Samba:
o For UFW:
sudo ufw allow Samba
o For firewalld:
sudo firewall-cmd --permanent --add-service=samba
sudo firewall-cmd --reload
6. Find the Share Path
Determine the IP address of the server hosting the share by running:
ip a
The Samba share path will look like:
smb://<SERVER_IP>/SharedScreenshots

Accessing the Samba Share from Other Linux Machines
1. Using a File Manager
Open the file manager on the Linux machine.
Enter the Samba share path in the address bar:
smb://<SERVER_IP>/SharedScreenshots
You should be able to access the shared folder and exchange files.
2. Mounting the Share via Command Line
Install the cifs-utils package if not already installed:
sudo apt install cifs-utils -y
Mount the Samba share to a local directory:
sudo mkdir /mnt/screenshots
sudo mount -t cifs //SERVER_IP/SharedScreenshots /mnt/screenshots -o guest
If the share requires authentication, replace guest with specific credentials:
sudo mount -t cifs //SERVER_IP/SharedScreenshots /mnt/screenshots -o username=<user>,password=<password>
3. Persistent Mounts (Optional)
To make the share persist across reboots, add it to the /etc/fstab file:
//SERVER_IP/SharedScreenshots /mnt/screenshots cifs guest,uid=1000,gid=1000 0 0

Accessing the Samba Share from Windows
1. Open File Explorer
In the address bar, type: Ifprompted,enterthecredentialsiftheshareispassword?protected.If prompted, enter the credentials if the share is password-protected. Ifprompted,enterthecredentialsiftheshareispassword?protected.
2. Map the Network Drive
Right-click “This PC” and select “Map network drive.”
Enter \<SERVER_IP>\SharedScreenshots in the folder field.
Choose a drive letter and check "Reconnect at logon" if needed.
1. Network-Specific Recommendations
* VLAN Segmentation: Ensure proper VLANs are configured for Internal, User, and Public segments to minimize lateral movement. Assign unique VLAN IDs to each segment.
* Inter-VLAN Routing Security: Apply ACLs (Access Control Lists) on your switch or firewall to limit inter-VLAN traffic only to necessary protocols and services.
* IP Address Management: Double-check IP addressing for the dual-stacked IPv4/IPv6 configuration. Confirm private IPs are used for internal traffic and public IPs are limited to the Public segment only.

2. Incident Response Enhancements
* Quick Triage Tools: Use tools like tcpdump or ngrep for live packet inspection, especially for identifying unusual patterns or signatures during incidents. Pre-configure common commands to save time.
* Pre-Written Incident Response Forms: Modify and prepare forms from the document for:
o Incident identification.
o Containment plans specific to each server type.
o Eradication procedures (e.g., DNS poisoning mitigation or ARP spoofing).

3. Firewall Hardening for Palo Alto
* Explicit Deny Rules: Place explicit "deny" rules at the end of the rulebase to catch unanticipated traffic.
* Threat Prevention Features:
o Use the Anti-Spyware module to detect and block command-and-control traffic.
o Enable DNS Security to prevent domain abuse or exfiltration through DNS.
o Implement App-ID to restrict allowed applications to only those necessary for your topology (e.g., HTTP/HTTPS for web servers, NTP for time sync).
* Logging Best Practices:
o Ensure logs are sent to a syslog server or SIEM for centralized analysis.
o Enable logging for both allowed and denied traffic.

4. Linux Hardening Beyond Basics
* Use auditd: Monitor and log critical filesystem changes and user activities. Preconfigure audit rules for /etc, /var/log, and user directories.
* SSH Security: Implement the following:
o Disable root login in /etc/ssh/sshd_config.
o Use key-based authentication instead of passwords.
o Restrict access to SSH by IP using firewall rules.
* Service Minimization: Use netstat or ss to identify unnecessary open ports on Linux systems and stop unneeded services.

5. Windows-Specific Recommendations
* Event Log Monitoring: Utilize the Event IDs listed in the document for intrusion detection (e.g., Event ID 4624 for logins and 4688 for process creation).
* RDP Hardening:
o Restrict RDP access to trusted IPs using firewall rules.
o Enable Network Level Authentication (NLA) to reduce brute-force risks.

6. Threat Scenarios Specific to Your Topology
* ARP Spoofing Mitigation:
o Use static ARP entries for critical systems (e.g., your gateway or DNS server).
o Enable ARP inspection features on your switch (if supported).
* DNS Poisoning:
o Harden your DNS server by restricting recursion and implementing DNSSEC.
o Monitor DNS traffic for unusual patterns or queries to suspicious domains.
* DDoS Prevention:
o Use rate-limiting features on your firewall to prevent flooding attacks.
o Configure SYN flood protection (like SYN cookies) on the Palo Alto firewall.

7. Documentation and Collaboration
* File Sharing: Set up a secure Samba or NFS share (as previously discussed) for quick screenshot and document exchange between team members.
* Script Repository: Store commonly used scripts for network diagnostics (e.g., ping sweeps, port scans) in a shared location.

8. Practice Scenarios
* Conduct a mock drill where:
o A server is compromised (e.g., through an SSH brute-force attack).
o The DNS server is under a cache poisoning attempt.
o A Public segment web server is defaced.

9. Continuous Monitoring
* Wireshark Filters:
o Prepare filters for specific network issues (e.g., arp, dns, http) based on the document examples.
* SNORT Rules:
o Load pre-configured rules for detecting common threats like ARP spoofing, DoS attacks, and SQL injection attempts.

10. Backup and Recovery
* Pre-configure Backup Plans: Regular backups for configuration files (firewall, Linux, Windows) should be part of your SOP.
* Restoration Testing: Verify that restoring key services (e.g., Active Directory, DNS) is functional and timely.

